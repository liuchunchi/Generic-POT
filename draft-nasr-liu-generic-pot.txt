



Network Working Group                                             C. Liu
Internet-Draft                                    Your Organization Here
Intended status: Informational                          28 November 2024
Expires: 1 June 2025


                   Generic Proof of Transit Mechanism
                   draft-nasr-liu-generic-pot-latest

Abstract

   This document describes a generic abstraction of Proof of Transit
   (PoT) mechanisms.  It provides abstract roles and conceptual messages
   to help different PoT mechanism designs work together.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://liuchunchi.github.io/Generic-POT/draft-nasr-liu-generic-
   pot.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-nasr-liu-generic-pot/.

   Source for this draft and an issue tracker can be found at
   https://github.com/liuchunchi/Generic-POT.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 1 June 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology
   3.  Roles
   4.  Messages
   5.  Steps of a Typical PoT Mechanism
     5.1.  Setup Reference Baseline
     5.2.  Calculation
     5.3.  Verification
   6.  Existing Instances
   7.  Use Case Analysis
   8.  Cross-domain Interoperability
   9.  Security Considerations
     9.1.  Replay Attacks
     9.2.  Forgery Attacks
     9.3.  Removal
     9.4.  L2 stealth devices
   10. IANA Considerations
   11. Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   The Proof-of-Transit (PoT) mechanism provides a cryptographically
   secure record of a message's forwarding trail at a specified
   granularity, serving as a security complement to packet-steering
   techniques such as Segment Routing (SR), Traffic Engineering (TE) and
   Policy-Based Routing (PBR).

   Emerging client requirements, such as regulatory compliance and
   customized security assurance, necessitate the capability to record a
   packet's exact forwarding history.  In response, various Proof-of-
   Transit mechanisms have been proposed.  To facilitate
   interoperability across domains, this document distills the common
   characteristics of existing PoT mechanisms, enabling clients to
   deploy diverse designs while maintaining cross-domain compatibility.

2.  Terminology

   *  Proof-of-Transit (PoT): A PoT is a cryptographically verifiable
      proof that a message has been processed by a specific network
      element, transmitted either in-band as a message tag or out-of-
      band via a separate channel.

   *  PoT Mechanism: A PoT mechanism specifies the algorithms and
      procedures for calculating and verifying PoT, along with the
      requisite protocol extensions for its transmission.

3.  Roles

   *  Node: A forwarding network element on the predetermined path.  It
      inspects, processes or verifies the packet header of a certain
      level so as to be visible.

   *  Producer: Produces a PoT.

   *  Verifier: Verifies a PoT for a message.  The verifier can be a
      network element on the path, a network element at the end of a
      path, a controlling element like a border gateway, an end-client
      or a controller.

   *  Decision-making Point: The decision-making point can make further
      packet-level processing decisions according to PoT verification
      result.  It can choose to accept, forward or drop a message.

   *  Setup: Produces necessary auxillary information to produce or
      verify PoTs.  Usually the setup is the network controller or an
      equivalence.

4.  Messages

   *  Input: The necessary information that uniquely identifies the
      message at this granularity.  For example, if it is at stream
      level, the input can be the five-tuple.  If it is at packet level,
      the input can be the thumbprint of the IP header and its payload.
      To add device processing details, the input should also include
      ingress interface, egress interface, and other device-specific
      information.

   *  Output:

      -  In-situ Tag: The PoT is attached to the message as a tag.  The
         end node or the intermediate nodes can verify and/or update it.
         This tag can be carried using In Situ Operations,
         Administration, and Maintenance (IOAM), Alternate Marking, or
         other In-Band Network Telemetry techniques.  The in-situ tag
         has two calculation types:

      -  Out-of-band Message: The PoT is sent out-of-band via a separate
         channel.  The verifier or decision-making point not on the path
         can verify it.  This message can be sent using IPFIX, NetFlow,
         Netconf/YANG, SNMP, gNMI/gRPC, etc.

   *  Auxillary Information: The auxillary information is used to
      calculate a PoT.  It includes public cryptographic parameters,
      keys, secret values, profiles etc.

   *  Verification Reference: The verification reference is a
      deterministic reference value used during the PoT verification
      process.  It can be identiical to the expected PoT, or an input to
      PoT verification algorithm.  The Verifier or the Decision-making
      Point must possess a verification reference.

5.  Steps of a Typical PoT Mechanism

5.1.  Setup Reference Baseline

   *  Controller Setup: The controller computes the path, obtaining the
      forwarding baseline.  It then computes the verification reference
      for each individual verifier node on the path, and directly
      configure them to the respective node.  The controller may have
      the keys or secret value of the producers/verifiers to compute the
      verification references.  It should be considered a trusted setup.

   *  Distributed Setup: When no controller is present, the verification
      references are generated via a dial-test like method and
      distributed along the path.

   Each verifier or producer also requires an identification mechanism
   that triggers verification or production of PoT.  During the setup,
   packet or stream characteristics should be recorded along with the
   verification reference or auxillary information.

5.2.  Calculation

   *  Calculate-and-Replace: The Producer calculates its PoT and
      replaces the current PoT on the packet.  It can either be a direct
      replacement (usually needs verification) or an aggregation with
      the current PoT (may not need verification).

   +-------------+         +-------------+
   | header      |         | header      |
   | +---------+ |         | +---------+ |
   | | POT X   | |   ----> | | POT Y   | |
   | +---------+ |         | +---------+ |
   +-------------+         +-------------+

   *  Calculate-and-Concatenate: The producer calculates its PoT and
      concatenates it to the current PoT on the packet.

   +-------------+         +-------------+
   | header      |         | header      |
   | +---------+ |         | +---------+ |
   | | POT X   | |   ----> | | POT X   | |
   | +---------+ |         | +---------+ |
   +-------------+         | | POT Y   | |
                           | +---------+ |
                           |     ...     |
                           +-------------+

   *  Calculate-and-send: The producer calculates its PoT and send it
      out-of-band via a separate channel.

5.3.  Verification

   *  End-verify: This happens when the end-node or end-client verifies
      the PoT.  It saves intermediate verification time, but possible
      deviation will not be found in real-time.  No immediate responses
      possible.

   *  Mid-verify: This happens when the intermediate node verifies the
      PoT.  Each mid-verifier can also make packet decisions.  This
      increases overhead but can discover deviation in real-time, and
      immediate responses like packet drops can take place.  This can
      minimize attack window and the risk of data leakage to non-secure
      devices.

6.  Existing Instances

   Frank Brockners et al. produced a PoT mechanism based on revised
   Shamir's Secret Sharing Scheme [I-D.ietf-sfc-proof-of-transit-08].
   Luigi Iannone et al. produced a PoT mechanism based on Hash-based
   Message Authentication Codes [I-D.iannone-spring-srv6-pot-00].

7.  Use Case Analysis

   *  Geofencing:

   In the context of data transmission, geofencing refers to the
   practice of forwarding specific data within a virtual perimeter that
   corresponds to a defined real-world geographic area.  In this use
   case, the border gateway device is the verifier and decision making
   point.  If the carried POT does not pass verification, it can drop
   the packet to protect data confidentiality.

                     Jurisdiction A    Jurisdiction B
                                      |
                                      |  Border
                                      |  Gateway
         +--------+   +--------+  +---+------+
         |        |   |        |  | Verifier,|
   ... --> Node 1 +---> Node 2 +--> Decision |
         |        |   |        |  |  Point   |
         +--------+   +--------+  +---+------+
                                      |
                                      |
                                      |

   *  SRv6 Path Validation

   When in SRv6 strict mode, the forwarding must strictly adhere to the
   segment list.  In this case, each node is also a verifier
   (potentially decision making point), each verifies the carried POT
   before calculating its own.

   +----------+  +----------+  +----------+
   | Node 1,  |  | Node 2,  |  | Node 3,  |
   | Verifier +--> Verifier +--> Verifier |
   +----------+  +----------+  +----------+

8.  Cross-domain Interoperability

   When the domain A and domain B has implemented differnet PoT
   mechanisms, they are obviously not interoperable.  But there are two
   ways to enable interoperability:

   *  Pass-down Results: The border gateway of domain A act as an end-
      verifier.  It verifies the PoT, gets a result, sign it, remove PoT
      details, and pass the verification result down to domain B.  The
      verification result can be a binary result, or contains deviation
      logs.  The border gateway can choose to drop the packet if its
      policy mandates.

   *  Pass-down Details: The border gateway of domain A pass down the
      original PoT and necessary auxillary information of verification
      with a signature.  The gateway or other verifiers at domain B
      conduct the verification.  Due to the large size of the auxillary
      information, it should be sent via APIs or other OOB methods.

   However, when operating in one single domain, different vendors
   should agree on implementing and using one same PoT mechanism.

9.  Security Considerations

9.1.  Replay Attacks

   A replay attack occurs when a PoT is used more than once.  An
   attacker can intercept the PoT tag and use it again.  It usually
   occurs when the PoT is static or not using nonces.

9.2.  Forgery Attacks

   We should assume a POT should require some unique secret value or
   keys to compute.  When proper key rotation or key derivation methods
   are applied, forgery attacks can be avoided.

9.3.  Removal

   Since PoT can reflect potential deviation, a malicious attacker may
   try to remove a PoT tag from the packet that indicates a reroute.

9.4.  L2 stealth devices

   A L2 stealth device is usually a switch that only process L2 headers,
   such that they do not leave a mark on the L3 IP header.  It is to the
   opposite to the definition of node in this document since they have
   no visibility to be perceived.  In the list, we discussed and agreed
   that a PoT mechanism is only able to record forwarding trail of a
   specific level.  For now when dealing with SRv6 or other L3 use
   cases, L2 is out-of-scope.

   Another way to mitigate such threat is to extend PoT data field on L2
   headers.  For a controlled domain, the controller usually is aware of
   the real L2 topology, thus the L2 device between L3 devices.  Using
   similar algorithms and requiring L2 devices to do the same, L2
   visibility is doable in the future.

10.  IANA Considerations

   This document has no IANA actions.

11.  Informative References

   [I-D.iannone-spring-srv6-pot-00]
              Iannone, L. and A. Fressancourt, "Segment Routing over
              IPv6 (SRv6) Proof of Transit", Work in Progress, Internet-
              Draft, draft-iannone-spring-srv6-pot-00, 28 February 2024,
              <https://datatracker.ietf.org/doc/html/draft-iannone-
              spring-srv6-pot-00>.

   [I-D.ietf-sfc-proof-of-transit-08]
              Brockners, F., Bhandari, S., Mizrahi, T., Dara, S., and S.
              Youell, "Proof of Transit", Work in Progress, Internet-
              Draft, draft-ietf-sfc-proof-of-transit-08, 1 November
              2020, <https://datatracker.ietf.org/doc/html/draft-ietf-
              sfc-proof-of-transit-08>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Chunchi Liu
   Your Organization Here
   Email: 131236634+liuchunchi@users.noreply.github.com
